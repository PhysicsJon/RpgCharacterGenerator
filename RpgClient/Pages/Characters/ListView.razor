@page "/characters"
@using RpgApi.Domain.Models
@using RpgClient.Data
@inject ApiCaller apiCaller

<h3>Characters</h3>

<div>
    <h3>Filter</h3>
    <label for="playerFilter">Player Name: </label>
    <select class="custom-select" @onchange="Filter" name="playerFilter" id="playerFilter">
        <option>--Select Player--</option>
        @foreach (var player in _playerNames)
        {
            <option value="@player">@player</option>
        }
    </select>
</div>

@if (_charactersCollection.Count() == 0 && _loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!string.IsNullOrEmpty(_selectedFilter))
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Player Name</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var character in _filteredCharacters)
        {
            <tr>
                <td>@character.CharacterDetail.Name</td>
                <td>@character.CharacterDetail.PlayerName</td>
                <td>
                    <a href="/character/@character.Id">Edit</a>
                    <a href="/character/@character.Id/delete" class="oi oi-trash" aria-hidden="true"></a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Player Name</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var character in _charactersCollection)
        {
            <tr>
                <td>
                    <a href="/character/@character.Id/view">@character.CharacterDetail.Name</a>
                </td>
                <td>@character.CharacterDetail.PlayerName</td>
                <td>
                    <a href="/character/@character.Id">Edit</a>
                    <a href="/character/@character.Id/delete" class="oi oi-trash" aria-hidden="true"></a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    IEnumerable<Character> _charactersCollection = new List<Character>();

    List<string> _playerNames = new List<string>();
    bool _loading = true;

    string _selectedFilter;
    IEnumerable<Character> _filteredCharacters = new List<Character>();

    protected override async Task OnInitializedAsync()
    {
        _charactersCollection = await apiCaller.CallApiGet<IEnumerable<Character>>("/api/character").ConfigureAwait(false);
        _charactersCollection = _charactersCollection.OrderBy(c => c.Id);
        _playerNames = _charactersCollection.Select(s => s.CharacterDetail.PlayerName).Distinct().ToList();
        _loading = false;
    }

    void Filter(ChangeEventArgs e)
    {
        _selectedFilter = e.Value.ToString();
        if (_selectedFilter.Contains("--") || string.IsNullOrEmpty(_selectedFilter))
        {
            _filteredCharacters = _charactersCollection;
        }
        else
        {
            _filteredCharacters = _charactersCollection.Where(s => s.CharacterDetail.PlayerName == _selectedFilter);
        }
    }

}